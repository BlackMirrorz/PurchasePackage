#----------------------------------------
# Fastlane Pipeline SPM
# Copyright 2024
# Created By Josh Robbins (∩｀-´)⊃━☆ﾟ.*･｡ﾟ
#----------------------------------------

# Set Development Platform
default_platform(:ios)

# Create Global Mutable Variables
PROJECT_NAME = 'PurchasePackage'

#----------------------------------------
# Dependency Installation
# Setup Base Dependencies
#----------------------------------------

# Setup Base Dependencies On Your Machine
desc "☁️  Installs Base Dependencies For Our Devs."
lane :setupBaseDependenciesOnMachine do
  sh "chmod +x ./scripts/IOSConfigurationSPM.sh" # Adjusted path
  sh "./scripts/IOSConfigurationSPM.sh" # Adjusted path
  UI.success("🫠 Base Dependencies Configured.")
end

# Setup Base Dependencies On CI
desc "☁️  Installs Base Dependencies For The CI."
lane :setupBaseDependenciesCI do
  sh "chmod +x ./scripts/IOSConfigurationCI-SPM.sh" # Adjusted path
  sh "./scripts/IOSConfigurationCI-SPM.sh" # Adjusted path
  UI.success("🫠 Base Dependencies Configured.")
end

#-----------------------------
# Linting & Code Formatting
# Runs SwiftLint & SwiftFormat
#-----------------------------

desc "☁️  Validates The Current Project Using SwiftLint And Swift Format"
lane :lint_and_format_project_with_validation do
   lint_and_format_project(action: :lint, tool: :lint)
   lint_and_format_project(action: :validate_format, tool: :format)
   UI.success("✅ Code Standardisation Completed 🫠")
end

desc "☁️  Lints And Formats The Current Project"
lane :lint_and_format_project_with_autocorrect do
   lint_and_format_project(action: :fix, tool: :lint)
   lint_and_format_project(action: :format, tool: :format)
   UI.success("✅ Code Standardisation Completed 🫠")
end

desc "☁️  Lints Or Formats The Swift Project"
private_lane :lint_and_format_project do |options|
  
  action = options[:action] # :lint, :fix, :format, or :validate_format
  tool = options[:tool] # :lint for SwiftLint or :format for SwiftFormat
  
  swift_tool_info = swift_tool_version_extractor(tool: tool.to_s)
  executable_path = swift_tool_info[:swifttool_executable]
  UI.success("🫠 Executable Extrapolated #{executable_path}")
  
  case tool
  when :lint
    swiftlint(
      mode: action == :fix ? :fix : :lint,
      executable: executable_path,
      config_file: "fastlane/.swiftlint.yml",
      raise_if_swiftlint_error: true,
      ignore_exit_status: false
    )
  when :format
    swiftformat(
      executable: executable_path,
      swiftversion: "5",
      config: "fastlane/.swiftformat",
      dryrun: action == :validate_format,
      lint: action == :validate_format
    )
  else
    UI.error("Invalid tool specified")
  end
    UI.success("✅ Action #{action} With #{tool} Completed 🫠")
end


#----------------
#  Tests
# Runs Unit Tests
#----------------

desc "☁️  Runs Unit Tests"
lane :run_unit_tests do

  didPassUnitTests = unit_tests_spm(
    command: "test",
    simulator: "macosx"
  )

  failed_image_url = "https://octodex.github.com/images/original.png"
  passed_image_url = "https://octodex.github.com/images/class-act.png"
  
  image_url = didPassUnitTests ? passed_image_url : failed_image_url
    
  tests_status = didPassUnitTests ?  "🏆 Unit Tests Passed 🏆" : "⚠️ Unit Tests Failed ⚠️"
  message_body =  didPassUnitTests ? " 🛠️ Good Work! 🛠️" : "🆘 Please Check The Logs! 🆘"
  
  project_name = ENV['PROJECT_NAME'] || PROJECT_NAME
   
  require 'fileutils'
  test_output_directory = "./test_output"
  FileUtils.rm_rf(test_output_directory) if Dir.exist?(test_output_directory)

  if !didPassUnitTests
    UI.user_error!("💩 Tests Failed")
   end
end
